#!/usr/bin/env python
# coding: utf-8

"""Plots signals in time domain and requency domain.

You can run as a standalone script or import from ipython
with the -pylab option.

>>> import t_fdomain
>>> plot_spectrum()
"""

from pylab import pi, exp, sin, log10, sign, randn
from pylab import fft, arange, zeros, size
from pylab import plot, draw, xlabel, ylabel, axis, grid, title
import pylab
import time
import sys

def plot_spectrum():
    N = 4096                      #FFT points
    r = 0.25                      #roll-off
    #
    D = 64                        #sampling/symbol interval rate
    S = N/D                       #bit stream lenght
    k = arange(S)
    x = arange(N)

    ##########################################################
    #                 INPUT SIGNAL
    ##########################################################
    #  1. Random signal I. White noise
    WN = 0.5 * randn(size(x))
    #  2. Deterministic, periodic sinosoidal waweform
    SW = sin(x * 2 * D * pi/N)
    #  3. Deterministic, periodic sequence of rectangular pulses
    RW = sign(sin(x * 2 * D * pi/(N+1)))
    #  4. Deterministic, nonperiodic sinosoidal waweform
    DS = exp(-0.005 * x) * sin(x * 2 * D * pi/N)
    #  5. Deterministic, damped sequence of rectangular pulses
    DR = exp(-0.005 * x) * sign(sin((x-1) * 2 * D * pi/(N+1)))
    #  6. Random signal II.   Bit string generated by random sequence
    #TODO Do not works.
    ni = sign(randn(size(k)))
    k = 0                      #resampled signal for FFT
    RR = zeros(N)
    for w in range(N-D+1, D):
        RR[w:w+D] = ni[k]
        k = k+1

    ##########################################################
    MM = DR     #ITT válaszd ki a bemenőjelet!

    ##########################################################
    #                SPECTRUMs
    ##########################################################
    ww = range(N)
    #
    X = fft(MM, N)
    XX = 20 * log10(abs(sys.float_info.min+X/N))
    #
    pylab.subplots_adjust(hspace=.4) #See tight space
    pylab.subplot(2, 1, 2)
    plot(ww, XX, "--")
    axis([1, N/8, -100, 0])
    xlabel ('f [Hz]')
    ylabel ('absY($j\omega$)  [dB]')
    title('Frequency domain')
    grid(True)
    #
    pylab.subplot(2, 1, 1)
    plot(ww, MM, "--")
    axis([1, N/4, -1.5, 1.5])
    xlabel ('t  [x0.25 ms]')
    ylabel ('u(t)  [V]')
    title('Time domain')
    grid(True)

if __name__ == '__main__':
    plot_spectrum()
    draw()
    time.sleep(8)
