#!/usr/bin/env python
# coding: utf-8

"""Plots signals in time domain and requency domain.

You can run as a standalone script or import from ipython
with the -pylab option.

>>> import t_fdomain
>>> plot_spectrum()
"""

from pylab import pi, exp, sin, log10, sign, randn
from pylab import xlabel, ylabel, axis, grid
import pylab
import time
import sys

def plot_spectrum(signal):
    """Plots a signal and its spectrum

    signal can be a number an abbreviation or an experssion:

    1 = "wn"    = white noise
    2 = "sinus"   = periodic sinusoidal waveform
    3 = "rect"  = periodic rectangular pulses
    4 = "dsin"  = dumped sinusoidal waveform
    5 = "drect" = dumped rectangular waveform

    expression can be an expression of the abbreviations
    like:

      "wn + 0.5*dsin"

    >>> import t_fdomain
    >>> plot_spectrum("rw")
    >>> plot_spectrum(5)
    """
    N = 4096                      #FFT points
    D = 64                        #sampling/symbol interval rate
    S = N//D                      #bit stream lenght
    x = pylab.arange(N)

    ##########################################################
    #                 INPUT SIGNAL
    ##########################################################
    #  1. Random signal I. White noise
    wn = 0.5 * randn(pylab.size(x))
    #  2. Deterministic, periodic sinosoidal waweform
    sinus = sin(x * 2 * D * pi/N)
    #  3. Deterministic, periodic sequence of rectangular pulses
    rect = sign(sin(x * 2 * D * pi/(N+1)))
    #  4. Deterministic, nonperiodic sinosoidal waweform
    dsin = exp(-0.005 * x) * sin(x * 2 * D * pi/N)
    dsinus = dsin
    #  5. Deterministic, damped sequence of rectangular pulses
    drect = exp(-0.005 * x) * sign(sin((x-1) * 2 * D * pi/(N+1)))
    #  6. Random signal II.   Bit string generated by random sequence
    bitvalues = sign(randn(S))
    bits = []
    for value in bitvalues:
        bits.extend([value]*D)
    bits = pylab.array(bits)

    ##########################################################
    if isinstance(signal, int):
        signal = ["wn", "sinus", "rect",
                "dsin", "drect", "bits"][signal-1]
    signal = eval(signal)

    ##########################################################
    #                SPECTRUMs
    ##########################################################
    ww = range(N)
    #
    X = pylab.fft(signal, N)
    XX = 20 * log10(abs(sys.float_info.min+X/N))
    #
    pylab.subplots_adjust(hspace=.4) #See tight space
    pylab.subplot(2, 1, 2)
    pylab.plot(ww, XX, "-")
    axis([1, N/8, -100, 0])
    xlabel ('f [Hz]')
    ylabel ('absY($j\omega$)  [dB]')
    pylab.title('Frequency domain')
    grid(True)
    #
    pylab.subplot(2, 1, 1)
    pylab.plot(ww, signal, "-")
    axis([1, N/4, -1.5, 1.5])
    xlabel ('t  [x0.25 ms]')
    ylabel ('u(t)  [V]')
    pylab.title('Time domain')
    grid(True)

if __name__ == '__main__':
    plot_spectrum("dsinus")
    plot_spectrum("sinus")
    pylab.draw()
    time.sleep(8)
